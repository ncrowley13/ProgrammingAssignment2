m <- matrix(c(-1, -2, 1, 1), 2, 2)\
m <- matrix(c(-1, -2, 1, 1), 2, 2)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<-y
m <<-NULL
}
get <-function() x
setinverse <- function(solve) m <<- solve
getinverse <- function () m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function calculates the inverse of a matrix
##
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
x <- makeCacheMatrix(m)
x$get()
inv <- cacheSolve(x)
inv <- cacheSolve(x)
x
x$get()
## Put comments here that give an overall description of what your
## functions do
## this main function stores a list of subset functions
##
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<-y
m <<-NULL
}
get <-function() x
setinverse <- function(solve) m <<- solve
getinverse <- function () m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function calculates the inverse of a matrix
##
cacheSolve <- function(x=matrix(), ...) {
m<-x$getinverse()
if(!is.null(m)){
message("getting cached data")
return(m)
}
solve<-x$get()
m<-solve(matrix, ...)
x$setinverse(m)
m
}
m <- matrix(c(-1, -2, 1, 1), 2, 2)
x$get()
inv <- cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
## this main function stores a list of subset functions
##
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<-y
m <<-NULL
}
get <-function() x
setinverse <- function(solve) m <<- solve
getinverse <- function () m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function calculates the inverse of a matrix
##
cacheSolve <- function(x=solve(), ...) {
m<-x$getinverse()
if(!is.null(m)){
message("getting cached data")
return(m)
}
solve<-x$get()
m<-solve(solve, ...)
x$setinverse(m)
m
}
m <- matrix(c(-1, -2, 1, 1), 2, 2)
x$get()
inv <-cacheSolve(x)
inv
inv <- cacheSolve(x)
inv
